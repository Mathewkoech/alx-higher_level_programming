#!/usr/bin/python3
"""Defines unittests for models/square.py"""

import io
import sys
import unittest
from models.base import Base
from models.square import Square


class Test_square_validation(unittest.TestCase):
    """testing square validation"""
    def test_width_validation(self):
        """test height validation"""
        with self.assertRaises(TypeError) as context:
            s = Square("num", 2)
        self.assertEqual(str(context.exception), "width must be an integer")

        with self.assertRaises(ValueError) as context:
            s = Square(-2, 7)
            self.assertEqual(str(context.exception), "width must be > 0")
    def test_x_validation(self):
        """test x validation"""
        with self.assertRaises(TypeError) as context:
            s = Square(2, "num", 1)
        self.assertEqual(str(context.exception), "x must be an integer")

        with self.assertRaises(ValueError) as context:
            s = Square(2, -1, 1)
        self.assertEqual(str(context.exception), "x must be >= 0")

    def test_y_validation(self):
        """test y validation"""
        with self.assertRaises(TypeError) as context:
            s = Square(4, 1, "num")
        self.assertEqual(str(context.exception), "y must be an integer")

        with self.assertRaises(ValueError) as context:
            s = Square(4, 2, -2)
        self.assertEqual(str(context.exception), "y must be >= 0")

class TestSquare_area(unittest.TestCase):
    """Unittests for testing the area method of the Square class."""

    def test_area_small(self):
        self.assertEqual(4900, Square(70, 10, 7, 1).area())

    def test_area_with_changed_values(self):
        s = Square(2, 0, 7, 11)
        s.size = 9
        self.assertEqual(81, s.area())

    def test_area_one_arg(self):
        s = Square(2, 10, 1, 1)
        with self.assertRaises(TypeError):
            s.area(2)

class TestSquareDisplay(unittest.TestCase):
    def setUp(self):
        # Redirect stdout to capture print statements
        self.saved_stdout = sys.stdout
        sys.stdout = StringIO()

    def tearDown(self):
        # Restore original stdout
        sys.stdout = self.saved_stdout

    def test_display_with_positive_dimensions(self):
        s = Square(2, 2)
        s.display()
        printed_output = sys.stdout.getvalue()
        expected_output = "##\n##\n"
        self.assertEqual(printed_output, expected_output)

class TestSquareStrMethod(unittest.TestCase):

     def test_str_method_print_size(self):
        s = Square(2)
        s.display()
        printed_output = sys.stdout.getvalue()
        correct = "[Square] ({}) 0/0 - 2\n".format(s.id)
        self.assertEqual(correct,printed_output )

    def test_str_method_size_x(self):
        s = Square(9, 9)
        correct = "[Square] ({}) 9/0 - 9".format(s.id)
        self.assertEqual(correct, s.__str__())

    def test_str_method_size_x_y(self):
        s = Square(7, 4, 22)
        correct = "[Square] ({}) 4/22 - 7".format(s.id)
        self.assertEqual(correct, str(s))


class TestSquareUpdateMethod(unittest.TestCase):

    def test_update_with_negative_values(self):
        r = Square(1, 1, 1,)
        with self.assertRaisesRegex(ValueError, "width must be > 0"):
            r.update(2, -2, 4, 5, 6)
        with self.assertRaisesRegex(ValueError, "height must be > 0"):
            r.update(2, 3, -3, 5, 6)
        with self.assertRaisesRegex(ValueError, "x must be >= 0"):
            r.update(2, 3, 4, -6, 6)
        with self.assertRaisesRegex(ValueError, "y must be >= 0"):
            r.update(2, 3, 4, 5, -9)

    def test_update_with_too_few_args(self):
        r = Square(1, 1, 1, 1, 1)
        with self.assertRaises(TypeError):
            r.update(2)

    def test_update_with_args(self):
        r = Square(1, 1, 1, 1, 1)
        r.update(2, 3, 4, 5, 6)
        self.assertEqual(r.id, 2)
        self.assertEqual(r.width, 3)
        self.assertEqual(r.height, 4)
        self.assertEqual(r.x, 5)
        self.assertEqual(r.y, 6)

    def test_update_with_kwargs(self):
        r = Square(1, 1, 1, 1, 1)
        r.update(id=2, width=3, height=4, x=5, y=6)
        self.assertEqual(r.id, 2)
        self.assertEqual(r.width, 3)
        self.assertEqual(r.height, 4)
        self.assertEqual(r.x, 5)
        self.assertEqual(r.y, 6)

    def test_update_with_args_and_kwargs(self):
        r = Square(1, 1, 1, 1, 1)
        r.update(2, 3, 4, 5, 6, id=7, width=8, height=9, x=10, y=11)
        self.assertEqual(r.id, 2)  # takes previous
        self.assertEqual(r.width, 3)
        self.assertEqual(r.height, 4)
        self.assertEqual(r.x, 5)
        self.assertEqual(r.y, 6)

class test_to_dictionary(unittest.TestCase):
    """Unittests for testing to_dictionary method of the Square class."""
    def test_square_to_dictionary(self):
        r = Square(1, 2, 3, 4, 5)
        expected_result = {'id': 5, 'width': 1, 'height': 2, 'x': 3, 'y': 4}
        self.assertEqual(r.to_dictionary(), expected_result)



if __name__ == "__main__":
    unittest.main()
